.. _fmfu_smp_svr_sample:

Cellular: Full modem firmware update using SMP Server
#####################################################

.. contents::
   :local:
   :depth: 2

This sample application implements a Simple Management Protocol (SMP) Server, using the SMP transfer encoding with the MCU manager (mcumgr) management protocol, to provide an interface over UART which enables the device to do full modem firmware updates.

For more information about mcumgr and SMP, see `device_mgmt`.

Requirements
************

The sample supports the nRF91 based development kits.

Overview
********

The sample performs the following operations:

1. It deinitializes the `nrfxlib:nrf_modem`.
#. It registers to mcumgr a ``stat`` command.
#. It then registers the commands to upload the firmware and to get the hash.
#. It finally enters an idle loop, waiting for any communication over the serial line.

The sample also provides a UART overlay that will allow your sample to transfer at a speed of 1M baud, and it enables support for the ``fmfu_mgmt`` command group.
See `lib_fmfu_mgmt` for more details.

.. note::
   UART is the only transport method supported.
   RTT is enabled by default to ensure that you can view the log generated by the sample or other subsystems.
   See `testing_rtt` for details.

Building and running
********************

To use the UART overlay for increasing the transfer speed, add the ``-DDTC_OVERLAY_FILE=uart.overlay`` flag to your build.
When building on the command line add the UART overlay in the following way:

   west build -b conexio_stratus_ns -- -DDTC_OVERLAY_FILE=uart.overlay

Flash the compiled firmware using `newtmgr` to Conexio Stratus DK

   newtmgr -c serial image upload build/zephyr/app_update.bin

Updating the Modem firmware
=======

After programming the sample to your Stratus development kit, update the full modem firmware by performing the following steps:

1. Connect the USB cable and power on or reset your Stratus device.
#. Call the provided `update_modem.py` script from the terminal inside the project folder specifying the COM port, the modem firmware ZIP file, and the UART baud rate shown in the following examples.

If you do not have `pynrfjprog` library for Python3 installed, first run 

   pip3 install pynrfjprog

If you used the default baud rate of 115200 when building the firmware above then command:

   python3 update_modem.py mfw_nrf9160_1.3.5.zip /dev/tty.SLAB_USBtoUART *115200*

If you used the ``-DDTC_OVERLAY_FILE=uart.overlay`` flag with higher baud rate of 1000000:

   python3 update_modem.py mfw_nrf9160_1.3.5.zip /dev/tty.SLAB_USBtoUART  *1000000*


Sample output
-------------

The python script should print the following output:

.. code-block:: console

   # modem firmware upgrade over serial port example started.
   [HighLevel] Creating new probe
   [HighLevel] Initialize new probe.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Dll directory is /opt/nordic/ncs/toolchains/20d68df7e5/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pynrfjprog/lib_x64.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Find and connect to dfu dll
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Using DFU dll at /opt/nordic/ncs/toolchains/20d68df7e5/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pynrfjprog/lib_x64/libnrfdfu.dylib.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Load library at /opt/nordic/ncs/toolchains/20d68df7e5/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pynrfjprog/lib_x64/libnrfdfu.dylib.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Library loaded, loading member functions.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFUProbe] Member functions succesfully loaded.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] Initialize new probe.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] Successfully opened port: /dev/tty.SLAB_USBtoUART@1000000,flow_control:none,parity:none.
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] Error caught in parse_stat_response: Key not found: 'rc'
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] {
       "duration": 447, 
       "error_code": "Ok", 
       "operation": "open_uart", 
       "outcome": "success", 
       "progress_percentage": 100
   }
   ...
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] {
    "duration": 0, 
    "message": "Uploading image to device", 
    "operation": "upload_image", 
    "progress_percentage": 10
   }
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] {
       "duration": 8, 
       "message": "Uploading image to device", 
       "operation": "upload_image", 
       "progress_percentage": 15
   }
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] {
       "duration": 16, 
       "message": "Uploading image to device", 
       "operation": "upload_image", 
       "progress_percentage": 21
   }
   ...
   [Probes./dev/tty.SLAB_USBtoUART] [ModemUARTDFU-/dev/tty.SLAB_USBtoUART] {
    "duration": 4, 
    "error_code": "Ok", 
    "operation": "close_uart", 
    "outcome": "success", 
    "progress_percentage": 100
   }
   [HighLevel] Done.
   -------------------------------------------------------
   The operation took 83.88 seconds 


Credit 
===============
Nordic Semiconductor
